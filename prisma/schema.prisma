generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?     @db.VarChar(255)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  email         String?     @unique
  phone         String?     @unique @db.VarChar(20)
  emailVerified DateTime?   @map("email_verified")
  password      String?
  feebbacks     feedbacks[]
  image         String?
  accountType   String?     @map("account_type")
  otp           String?
  payments      Payment[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Payment {
  id             String  @id @default(cuid())
  type           String
  cardNumber     String
  CVV            String
  expirationDate String
  qrCode         String?
  userId         String
  user           User    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}

model Restaurant {
  id                  String             @id @default(cuid())
  name                String
  address             String
  registerAt          DateTime           @default(now())
  updatedAt           DateTime?          @updatedAt
  rate                Float?
  restaurantId        String
  restaurantLicenseId String
  menu                MenuDetail[]
  restaurantLicense   RestaurantLicense?
}

model RestaurantLicense {
  id                    String     @id @default(cuid())
  businessLicense       String
  certificateFoodSafety String
  chefCertificate       String
  restaurantId          String     @unique
  restaurant            Restaurant @relation(fields: [restaurantId], references: [id])
}

model MenuDetail {
  restaurantId String
  menuId       String
  name         String
  description  String
  menu         Menu       @relation(fields: [menuId], references: [id])
  restarant    Restaurant @relation(fields: [restaurantId], references: [id])

  @@id([restaurantId, menuId])
  @@index([menuId], map: "MenuDetail_menuId_fkey")
}

model Menu {
  id        String       @id @default(cuid())
  beverages Beverage[]
  detail    MenuDetail[]
}

model Beverage {
  id          String      @id @default(cuid())
  name        String
  price       Float
  description String?
  image       String?
  status      Boolean
  feedbacks   feedbacks[]
  menuId      String
  menu        Menu        @relation(fields: [menuId], references: [id])

  @@index([menuId], map: "Beverage_menuId_fkey")
}

model feedbacks {
  id         String   @id @default(cuid())
  userId     String
  beverageId String
  rate       Float
  comment    String?
  user       User     @relation(fields: [userId], references: [id])
  beverage   Beverage @relation(fields: [beverageId], references: [id])

  @@index([userId], map: "feedbacks_userId_fkey")
  @@index([beverageId], map: "feedbacks_restaurantId_fkey")
}
