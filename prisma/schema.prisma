generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?     @db.VarChar(255)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  username      String?     @unique
  email         String?     @unique
  phone         String      @unique @db.VarChar(20)
  emailVerified DateTime?   @map("email_verified")
  password      String?
  image         String?
  accountType   String?     @default("user") @map("account_type")
  otp           String?
  status        Boolean?    @default(true)
  restaurant    Restaurant?
  payments      Payment[]
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Payment {
  id             String  @id @default(cuid())
  type           String
  cardNumber     String
  CVV            String
  expirationDate String
  qrCode         String?
  userId         String
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "Payment_userId_fkey")
  @@map("payments")
}

model Restaurant {
  id                String             @id @default(cuid())
  name              String
  address           String
  image             String?
  description       String?
  registerAt        DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  rate              Float?
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  beverages         Beverage[]
  restaurantLicense RestaurantLicense?

  @@map("restaurants")
}

model RestaurantLicense {
  id                    String     @id @default(cuid())
  businessLicense       String
  certificateFoodSafety String
  chefCertificate       String
  restaurantId          String     @unique
  restaurant            Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("restaurantlicenses")
}

model Beverage {
  id           String         @unique @default(cuid())
  name         String
  price        Float
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  description  String?
  image        String?
  status       Boolean?       @default(true)
  rate         Float?
  orderCount   Int?
  restaurantId String
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderDetails OrderDetails[]

  @@id([restaurantId, name])
  @@index([restaurantId], map: "Beverage_restaurantId_fkey")
  @@map("beverages")
}

model Order {
  id            String         @id @default(cuid())
  userId        String
  status        Boolean        @default(false)
  paymentMethod String         @default("cash")
  total         Float?
  orderDetails  OrderDetails[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "orders_userId_fkey")
  @@map("orders")
}

model OrderDetails {
  beverageId String
  orderId    String
  quantity   Int
  orderAt    DateTime  @default(now())
  doneAt     DateTime?
  rate       Float?
  comment    String?
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  beverage   Beverage  @relation(fields: [beverageId], references: [id], onDelete: Cascade)

  @@id([beverageId, orderId])
  @@index([beverageId], map: "feedbacks_restaurantId_fkey")
  @@map("orderDetails")
}
